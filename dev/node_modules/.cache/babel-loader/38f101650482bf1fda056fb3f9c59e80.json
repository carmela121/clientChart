{"ast":null,"code":"var _jsxFileName = \"/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\n\nconst AutomationRealTimeChart = () => {\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [data, setData] = useState({\n    labels: automationData.map(item => item.Day),\n    datasets: [{\n      label: \"Current State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(75,192,192,0.4)\",\n      borderColor: \"rgba(75,192,192,1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(75,192,192,1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: automationData.map(item => item[\"Current state\"])\n    }, {\n      label: \"Improved State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n      borderColor: \"rgba(255, 0, 0, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(255, 0, 0, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: automationData.map(item => item[\"Improved State\"])\n    }, {\n      label: \"Optimal State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n      borderColor: \"rgb(241, 226, 95, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgb(241, 226, 95, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: automationData.map(item => item[\"Optimal State\"])\n    }]\n  });\n  useEffect(() => {\n    if (dayCounter < 50) {\n      setTimeout(() => {\n        setDayCounter(dayCounter + 1);\n        const dataItem = burndownData.filter(item => {\n          if (parseInt(item.Day) === dayCounter) {\n            console.log(item);\n          }\n        });\n        setAutomationData(dataItem);\n      }, 1000);\n    }\n  }, [dayCounter]);\n\n  if (dayCounter === 50) {\n    console.log(automationData);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"80%\",\n      margin: \"40px auto\"\n    },\n    id: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data,\n    options: {\n      scales: {\n        xAxes: [{\n          ticks: {\n            pointHitRadius: 4\n          }\n        }]\n      },\n      animation: {\n        duration: 0\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AutomationRealTimeChart;","map":{"version":3,"sources":["/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx"],"names":["React","useEffect","useState","Line","burndownData","AutomationRealTimeChart","automationData","setAutomationData","dayCounter","setDayCounter","initialState","setInitialState","data","setData","labels","map","item","Day","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","setTimeout","dataItem","filter","parseInt","console","log","width","margin","scales","xAxes","ticks","animation","duration"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\n\nconst AutomationRealTimeChart = () => {\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [data, setData] = useState({\n    labels: automationData.map((item) => item.Day),\n    datasets: [\n      {\n        label: \"Current State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: automationData.map((item) => item[\"Current state\"]),\n      },\n      {\n        label: \"Improved State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n        borderColor: \"rgba(255, 0, 0, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(255, 0, 0, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: automationData.map((item) => item[\"Improved State\"]),\n      },\n      {\n        label: \"Optimal State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n        borderColor: \"rgb(241, 226, 95, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgb(241, 226, 95, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: automationData.map((item) => item[\"Optimal State\"]),\n      },\n    ],\n  });\n\n  useEffect(() => {\n    if (dayCounter < 50) {\n      setTimeout(() => {\n        setDayCounter(dayCounter + 1);\n\n        const dataItem = burndownData.filter((item) => {\n          if (parseInt(item.Day) === dayCounter) {\n            console.log(item)\n          }\n        }\n        )\n        setAutomationData(dataItem)\n      }, 1000)\n    }\n\n  }, [dayCounter])\n  if (dayCounter === 50) {\n    console.log(automationData)\n  }\n\n  return (\n    <div style={{ width: \"80%\", margin: \"40px auto\" }} id=\"chart\">\n      <Line\n        data={data}\n        options={{\n          scales: {\n            xAxes: [{\n              ticks: {\n                pointHitRadius: 4\n              }\n            }]\n          },\n          animation: {\n            duration: 0\n          }\n        }}\n\n      />\n    </div>\n  );\n};\n\nexport default AutomationRealTimeChart;"]},"metadata":{},"sourceType":"module"}