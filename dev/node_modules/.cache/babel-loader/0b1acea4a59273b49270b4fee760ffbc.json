{"ast":null,"code":"var _jsxFileName = \"/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\n\nconst AutomationRealTimeChart = () => {\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [data, setData] = useState({\n    labels: burndownData.map(item => item.Day),\n    datasets: [{\n      label: \"Current State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(75,192,192,0.4)\",\n      borderColor: \"rgba(75,192,192,1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(75,192,192,1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: burndownData.map(item => item[\"Current state\"])\n    }, {\n      label: \"Improved State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n      borderColor: \"rgba(255, 0, 0, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(255, 0, 0, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: burndownData.map(item => item[\"Improved State\"])\n    }, {\n      label: \"Optimal State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n      borderColor: \"rgb(241, 226, 95, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgb(241, 226, 95, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: burndownData.map(item => item[\"Optimal State\"])\n    }]\n  });\n  useEffect(() => {\n    if (dayCounter < 50) {\n      const search = (day, clientData) => {\n        for (var i = 0; i < clientData.length; i++) {\n          if (clientData[i].Day === day) {\n            return clientData[i];\n          }\n        }\n      };\n\n      setTimeout(() => {\n        setDayCounter(dayCounter + 1); // const dataItem = burndownData.filter((item) => console.log(item.Day === dayCounter))\n\n        setAutomationData(search(dayCounter, burndownData));\n      }, 1000);\n    }\n  }, [dayCounter]);\n  console.log(automationData);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"80%\",\n      margin: \"40px auto\"\n    },\n    id: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data,\n    options: {\n      scales: {\n        xAxes: [{\n          ticks: {\n            pointHitRadius: 4\n          }\n        }]\n      },\n      animation: {\n        duration: 0\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AutomationRealTimeChart;","map":{"version":3,"sources":["/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx"],"names":["React","useEffect","useState","Line","burndownData","AutomationRealTimeChart","automationData","setAutomationData","dayCounter","setDayCounter","initialState","setInitialState","data","setData","labels","map","item","Day","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","search","day","clientData","i","length","setTimeout","console","log","width","margin","scales","xAxes","ticks","animation","duration"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AACpC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC;AAC/BY,IAAAA,MAAM,EAAEV,YAAY,CAACW,GAAb,CAAkBC,IAAD,IAAUA,IAAI,CAACC,GAAhC,CADuB;AAE/BC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,eADT;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,WAAW,EAAE,GAHf;AAIEC,MAAAA,eAAe,EAAE,sBAJnB;AAKEC,MAAAA,WAAW,EAAE,oBALf;AAMEC,MAAAA,cAAc,EAAE,MANlB;AAOEC,MAAAA,UAAU,EAAE,EAPd;AAQEC,MAAAA,gBAAgB,EAAE,GARpB;AASEC,MAAAA,eAAe,EAAE,OATnB;AAUEC,MAAAA,gBAAgB,EAAE,oBAVpB;AAWEC,MAAAA,oBAAoB,EAAE,MAXxB;AAYEC,MAAAA,gBAAgB,EAAE,CAZpB;AAaEC,MAAAA,gBAAgB,EAAE,CAbpB;AAcEC,MAAAA,yBAAyB,EAAE,oBAd7B;AAeEC,MAAAA,qBAAqB,EAAE,qBAfzB;AAgBEC,MAAAA,qBAAqB,EAAE,CAhBzB;AAiBEC,MAAAA,WAAW,EAAE,CAjBf;AAkBEC,MAAAA,cAAc,EAAE,EAlBlB;AAmBExB,MAAAA,IAAI,EAAER,YAAY,CAACW,GAAb,CAAkBC,IAAD,IAAUA,IAAI,CAAC,eAAD,CAA/B;AAnBR,KADQ,EAsBR;AACEG,MAAAA,KAAK,EAAE,gBADT;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,WAAW,EAAE,GAHf;AAIEC,MAAAA,eAAe,EAAE,sBAJnB;AAKEC,MAAAA,WAAW,EAAE,oBALf;AAMEC,MAAAA,cAAc,EAAE,MANlB;AAOEC,MAAAA,UAAU,EAAE,EAPd;AAQEC,MAAAA,gBAAgB,EAAE,GARpB;AASEC,MAAAA,eAAe,EAAE,OATnB;AAUEC,MAAAA,gBAAgB,EAAE,oBAVpB;AAWEC,MAAAA,oBAAoB,EAAE,MAXxB;AAYEC,MAAAA,gBAAgB,EAAE,CAZpB;AAaEC,MAAAA,gBAAgB,EAAE,CAbpB;AAcEC,MAAAA,yBAAyB,EAAE,oBAd7B;AAeEC,MAAAA,qBAAqB,EAAE,qBAfzB;AAgBEC,MAAAA,qBAAqB,EAAE,CAhBzB;AAiBEC,MAAAA,WAAW,EAAE,CAjBf;AAkBEC,MAAAA,cAAc,EAAE,EAlBlB;AAmBExB,MAAAA,IAAI,EAAER,YAAY,CAACW,GAAb,CAAkBC,IAAD,IAAUA,IAAI,CAAC,gBAAD,CAA/B;AAnBR,KAtBQ,EA2CR;AACEG,MAAAA,KAAK,EAAE,eADT;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,WAAW,EAAE,GAHf;AAIEC,MAAAA,eAAe,EAAE,wBAJnB;AAKEC,MAAAA,WAAW,EAAE,sBALf;AAMEC,MAAAA,cAAc,EAAE,MANlB;AAOEC,MAAAA,UAAU,EAAE,EAPd;AAQEC,MAAAA,gBAAgB,EAAE,GARpB;AASEC,MAAAA,eAAe,EAAE,OATnB;AAUEC,MAAAA,gBAAgB,EAAE,sBAVpB;AAWEC,MAAAA,oBAAoB,EAAE,MAXxB;AAYEC,MAAAA,gBAAgB,EAAE,CAZpB;AAaEC,MAAAA,gBAAgB,EAAE,CAbpB;AAcEC,MAAAA,yBAAyB,EAAE,sBAd7B;AAeEC,MAAAA,qBAAqB,EAAE,qBAfzB;AAgBEC,MAAAA,qBAAqB,EAAE,CAhBzB;AAiBEC,MAAAA,WAAW,EAAE,CAjBf;AAkBEC,MAAAA,cAAc,EAAE,EAlBlB;AAmBExB,MAAAA,IAAI,EAAER,YAAY,CAACW,GAAb,CAAkBC,IAAD,IAAUA,IAAI,CAAC,eAAD,CAA/B;AAnBR,KA3CQ;AAFqB,GAAD,CAAhC;AAqEAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,UAAU,GAAG,EAAjB,EAAqB;AACnB,YAAM6B,MAAM,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AAElC,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,cAAID,UAAU,CAACC,CAAD,CAAV,CAAcvB,GAAd,KAAsBqB,GAA1B,EAA+B;AAC7B,mBAAOC,UAAU,CAACC,CAAD,CAAjB;AACD;AAEF;AACF,OARD;;AAWAE,MAAAA,UAAU,CAAC,MAAM;AACfjC,QAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb,CADe,CAGf;;AACAD,QAAAA,iBAAiB,CAAC8B,MAAM,CAAC7B,UAAD,EAAaJ,YAAb,CAAP,CAAjB;AACD,OALS,EAKP,IALO,CAAV;AAMD;AAEF,GArBQ,EAqBN,CAACI,UAAD,CArBM,CAAT;AAsBAmC,EAAAA,OAAO,CAACC,GAAR,CAAYtC,cAAZ;AACA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEuC,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,MAAM,EAAE;AAAxB,KAAZ;AAAmD,IAAA,EAAE,EAAC,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAElC,IADR;AAEE,IAAA,OAAO,EAAE;AACPmC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CAAC;AACNC,UAAAA,KAAK,EAAE;AACLb,YAAAA,cAAc,EAAE;AADX;AADD,SAAD;AADD,OADD;AAQPc,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE;AADD;AARJ,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAoBD,CApHD;;AAsHA,eAAe9C,uBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\n\nconst AutomationRealTimeChart = () => {\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [data, setData] = useState({\n    labels: burndownData.map((item) => item.Day),\n    datasets: [\n      {\n        label: \"Current State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: burndownData.map((item) => item[\"Current state\"]),\n      },\n      {\n        label: \"Improved State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n        borderColor: \"rgba(255, 0, 0, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(255, 0, 0, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: burndownData.map((item) => item[\"Improved State\"]),\n      },\n      {\n        label: \"Optimal State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n        borderColor: \"rgb(241, 226, 95, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgb(241, 226, 95, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: burndownData.map((item) => item[\"Optimal State\"]),\n      },\n    ],\n  });\n\n  useEffect(() => {\n    if (dayCounter < 50) {\n      const search = (day, clientData) => {\n\n        for (var i = 0; i < clientData.length; i++) {\n          if (clientData[i].Day === day) {\n            return clientData[i];\n          }\n\n        }\n      }\n\n\n      setTimeout(() => {\n        setDayCounter(dayCounter + 1);\n\n        // const dataItem = burndownData.filter((item) => console.log(item.Day === dayCounter))\n        setAutomationData(search(dayCounter, burndownData))\n      }, 1000)\n    }\n\n  }, [dayCounter])\n  console.log(automationData)\n  return (\n    <div style={{ width: \"80%\", margin: \"40px auto\" }} id=\"chart\">\n      <Line\n        data={data}\n        options={{\n          scales: {\n            xAxes: [{\n              ticks: {\n                pointHitRadius: 4\n              }\n            }]\n          },\n          animation: {\n            duration: 0\n          }\n        }}\n\n      />\n    </div>\n  );\n};\n\nexport default AutomationRealTimeChart;"]},"metadata":{},"sourceType":"module"}