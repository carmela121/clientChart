{"ast":null,"code":"var _jsxFileName = \"/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\nimport { Button } from \"@material-ui/core\";\n\nconst AutomationRealTimeChart = () => {\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const [startAnimation, setStartAnimation] = useState(false);\n  const [reset, setReset] = useState(false);\n  const chartOptions = {\n    labels: automationData.map(item => item.Day),\n    datasets: [{\n      data: automationData.map(item => item[\"Current state\"]),\n      label: \"Current State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(75,192,192,0.4)\",\n      borderColor: \"rgba(75,192,192,1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(75,192,192,1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }, {\n      data: automationData.map(item => item[\"Improved State\"]),\n      label: \"Improved State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n      borderColor: \"rgba(255, 0, 0, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(255, 0, 0, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }, {\n      data: automationData.map(item => item[\"Optimal State\"]),\n      label: \"Optimal State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n      borderColor: \"rgb(241, 226, 95, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgb(241, 226, 95, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }]\n  };\n\n  if (startAnimation) {}\n\n  useEffect(() => {\n    if (startAnimation) {\n      setChartData(chartOptions);\n\n      if (dayCounter < 50) {\n        setTimeout(() => {\n          setDayCounter(dayCounter + 1);\n          setAutomationData(() => burndownData.slice(0, dayCounter));\n        }, 250);\n      }\n\n      if (dayCounter === 50) {\n        setStartAnimation(false);\n        setDayCounter(0);\n        setAutomationData([]);\n      }\n    }\n  }, [dayCounter, startAnimation]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"80%\",\n      margin: \"40px auto\"\n    },\n    id: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      scales: {\n        xAxes: [{\n          ticks: {\n            stepSize: 1\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            suggestedMax: 1000,\n            suggestedMin: 0\n          }\n        }]\n      },\n      animation: {\n        duration: 1000\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"40px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setStartAnimation(!startAnimation),\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, startAnimation ? \"Stop\" : \"Start\")));\n};\n\nexport default AutomationRealTimeChart;","map":{"version":3,"sources":["/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx"],"names":["React","useEffect","useState","Line","burndownData","Button","AutomationRealTimeChart","automationData","setAutomationData","dayCounter","setDayCounter","initialState","setInitialState","chartData","setChartData","startAnimation","setStartAnimation","reset","setReset","chartOptions","labels","map","item","Day","datasets","data","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","setTimeout","slice","width","margin","scales","xAxes","ticks","stepSize","yAxes","suggestedMax","suggestedMin","animation","duration","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\nimport { Button } from \"@material-ui/core\";\n\nconst AutomationRealTimeChart = () => {\n\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const [startAnimation, setStartAnimation] = useState(false);\n  const [reset, setReset] = useState(false)\n  const chartOptions =\n  {\n    labels: automationData.map((item) => item.Day),\n    datasets: [\n      {\n        data: automationData.map((item) => item[\"Current state\"]),\n        label: \"Current State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n\n      },\n      {\n        data: automationData.map((item) => item[\"Improved State\"]),\n        label: \"Improved State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n        borderColor: \"rgba(255, 0, 0, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(255, 0, 0, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n\n      },\n      {\n        data: automationData.map((item) => item[\"Optimal State\"]),\n        label: \"Optimal State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n        borderColor: \"rgb(241, 226, 95, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgb(241, 226, 95, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n\n      },\n    ],\n  }\n  if (startAnimation) {\n\n  }\n  useEffect(() => {\n    if (startAnimation) {\n      setChartData(chartOptions)\n\n      if (dayCounter < 50) {\n        setTimeout(() => {\n          setDayCounter(dayCounter + 1);\n          setAutomationData(() => burndownData.slice(0, dayCounter))\n\n        }, 250)\n      }\n      if (dayCounter === 50) {\n        setStartAnimation(false)\n        setDayCounter(0)\n        setAutomationData([])\n      }\n\n    }\n\n  }, [dayCounter, startAnimation])\n\n\n  return (\n    <div style={{ width: \"80%\", margin: \"40px auto\" }} id=\"chart\">\n      <Line\n        data={chartData}\n        options={{\n          scales: {\n            xAxes: [{\n              ticks: {\n                stepSize: 1\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                suggestedMax: 1000,\n                suggestedMin: 0\n              }\n            }]\n          },\n          animation: {\n            duration: 1000\n          }\n        }}\n\n      />\n      <div style={{ marginTop: \"40px\" }}>\n        <Button onClick={() => setStartAnimation(!startAnimation)} variant=\"contained\" color=\"secondary\">{startAnimation ? \"Stop\" : \"Start\"}</Button>\n\n      </div>\n\n    </div>\n  );\n};\n\nexport default AutomationRealTimeChart;"]},"metadata":{},"sourceType":"module"}