{"ast":null,"code":"var _jsxFileName = \"/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx\";\nimport React from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport automationData from \"./burndownData\";\n\nconst AutomationRealTimeChart = () => {\n  const [initialState, setInitialState] = React.useState([]);\n  const data = {\n    labels: automationData.map(item => item.Day),\n    datasets: [{\n      label: \"Current State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(75,192,192,0.4)\",\n      borderColor: \"rgba(75,192,192,1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(75,192,192,1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: automationData.map(item => item[\"Current state\"])\n    }, {\n      label: \"Improved State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n      borderColor: \"rgba(255, 0, 0, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(255, 0, 0, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: automationData.map(item => item[\"Improved State\"])\n    }, {\n      label: \"Optimal State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n      borderColor: \"rgb(241, 226, 95, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgb(241, 226, 95, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: automationData.map(item => item[\"Optimal State\"])\n    }]\n  };\n  React.useEffect(() => {\n    setInterval(function () {\n      var oldDataSet = data.datasets[0];\n      var newData = [];\n\n      for (var x = 0; x < data.labels.length; x++) {\n        newData.push(Math.floor(Math.random() * 100));\n      }\n\n      var newDataSet = { ...oldDataSet\n      };\n      newDataSet.data = newData;\n      var newState = { ...initialState,\n        datasets: [newDataSet]\n      };\n      setInitialState(newState);\n    }, 5000);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"80%\",\n      margin: \"40px auto\"\n    },\n    id: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data,\n    options: {\n      scales: {\n        xAxes: [{\n          ticks: {\n            stepSize: 10\n          }\n        }]\n      },\n      animation: {\n        duration: 10000\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AutomationRealTimeChart;","map":{"version":3,"sources":["/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx"],"names":["React","Line","automationData","AutomationRealTimeChart","initialState","setInitialState","useState","data","labels","map","item","Day","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","useEffect","setInterval","oldDataSet","newData","x","length","push","Math","floor","random","newDataSet","newState","width","margin","scales","xAxes","ticks","stepSize","animation","duration"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport automationData from \"./burndownData\";\n\nconst AutomationRealTimeChart = () => {\n  const [initialState, setInitialState] = React.useState([]);\n  const data = {\n    labels: automationData.map((item) => item.Day),\n    datasets: [\n      {\n        label: \"Current State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: automationData.map((item) => item[\"Current state\"]),\n      },\n      {\n        label: \"Improved State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n        borderColor: \"rgba(255, 0, 0, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(255, 0, 0, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: automationData.map((item) => item[\"Improved State\"]),\n      },\n      {\n        label: \"Optimal State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n        borderColor: \"rgb(241, 226, 95, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgb(241, 226, 95, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: automationData.map((item) => item[\"Optimal State\"]),\n      },\n    ],\n  };\n\n  React.useEffect(() => {\n    setInterval(function () {\n      var oldDataSet = data.datasets[0];\n      var newData = [];\n\n      for (var x = 0; x < data.labels.length; x++) {\n        newData.push(Math.floor(Math.random() * 100));\n      }\n\n      var newDataSet = {\n        ...oldDataSet\n      };\n\n      newDataSet.data = newData;\n\n\n      var newState = {\n        ...initialState,\n        datasets: [newDataSet]\n      };\n\n      setInitialState(newState);\n    }, 5000);\n  })\n  return (\n    <div style={{ width: \"80%\", margin: \"40px auto\" }} id=\"chart\">\n      <Line\n        data={data}\n        options={{\n          scales: {\n            xAxes: [{\n              ticks: {\n                stepSize: 10\n              }\n            }]\n          },\n          animation: {\n            duration: 10000\n          }\n        }}\n\n      />\n    </div>\n  );\n};\n\nexport default AutomationRealTimeChart;"]},"metadata":{},"sourceType":"module"}