{"ast":null,"code":"var _jsxFileName = \"/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\n\nconst AutomationRealTimeChart = () => {\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [data, setData] = useState({\n    labels: automationData.map(item => item.Day),\n    datasets: [{\n      data: automationData.map(item => item[\"Current state\"]),\n      label: \"Current State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(75,192,192,0.4)\",\n      borderColor: \"rgba(75,192,192,1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(75,192,192,1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }, {\n      data: automationData.map(item => item[\"Improved State\"]),\n      label: \"Improved State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n      borderColor: \"rgba(255, 0, 0, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(255, 0, 0, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }, {\n      data: automationData.map(item => item[\"Optimal State\"]),\n      label: \"Optimal State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n      borderColor: \"rgb(241, 226, 95, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgb(241, 226, 95, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }]\n  });\n  useEffect(() => {\n    if (dayCounter < 50) {\n      setTimeout(() => {\n        setDayCounter(dayCounter + 1);\n        setAutomationData(() => burndownData.slice(0, dayCounter));\n        setData(data);\n      }, 1000);\n    }\n  }, [dayCounter]); // if (dayCounter === 10) {\n  //   console.log(\"chart: \", data, \"new array: \", automationData.map((item) => item[\"Optimal State\"]))\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"80%\",\n      margin: \"40px auto\"\n    },\n    id: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data,\n    options: {\n      scales: {\n        xAxes: [{\n          ticks: {\n            pointHitRadius: 4\n          }\n        }]\n      },\n      animation: {\n        duration: 0\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AutomationRealTimeChart;","map":{"version":3,"sources":["/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx"],"names":["React","useEffect","useState","Line","burndownData","AutomationRealTimeChart","automationData","setAutomationData","dayCounter","setDayCounter","initialState","setInitialState","data","setData","labels","map","item","Day","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","setTimeout","slice","width","margin","scales","xAxes","ticks","animation","duration"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AACpC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC;AAC/BY,IAAAA,MAAM,EAAER,cAAc,CAACS,GAAf,CAAoBC,IAAD,IAAUA,IAAI,CAACC,GAAlC,CADuB;AAE/BC,IAAAA,QAAQ,EAAE,CACR;AACEN,MAAAA,IAAI,EAAEN,cAAc,CAACS,GAAf,CAAoBC,IAAD,IAAUA,IAAI,CAAC,eAAD,CAAjC,CADR;AAEEG,MAAAA,KAAK,EAAE,eAFT;AAGEC,MAAAA,IAAI,EAAE,KAHR;AAIEC,MAAAA,WAAW,EAAE,GAJf;AAKEC,MAAAA,eAAe,EAAE,sBALnB;AAMEC,MAAAA,WAAW,EAAE,oBANf;AAOEC,MAAAA,cAAc,EAAE,MAPlB;AAQEC,MAAAA,UAAU,EAAE,EARd;AASEC,MAAAA,gBAAgB,EAAE,GATpB;AAUEC,MAAAA,eAAe,EAAE,OAVnB;AAWEC,MAAAA,gBAAgB,EAAE,oBAXpB;AAYEC,MAAAA,oBAAoB,EAAE,MAZxB;AAaEC,MAAAA,gBAAgB,EAAE,CAbpB;AAcEC,MAAAA,gBAAgB,EAAE,CAdpB;AAeEC,MAAAA,yBAAyB,EAAE,oBAf7B;AAgBEC,MAAAA,qBAAqB,EAAE,qBAhBzB;AAiBEC,MAAAA,qBAAqB,EAAE,CAjBzB;AAkBEC,MAAAA,WAAW,EAAE,CAlBf;AAmBEC,MAAAA,cAAc,EAAE;AAnBlB,KADQ,EAuBR;AACExB,MAAAA,IAAI,EAAEN,cAAc,CAACS,GAAf,CAAoBC,IAAD,IAAUA,IAAI,CAAC,gBAAD,CAAjC,CADR;AAEEG,MAAAA,KAAK,EAAE,gBAFT;AAGEC,MAAAA,IAAI,EAAE,KAHR;AAIEC,MAAAA,WAAW,EAAE,GAJf;AAKEC,MAAAA,eAAe,EAAE,sBALnB;AAMEC,MAAAA,WAAW,EAAE,oBANf;AAOEC,MAAAA,cAAc,EAAE,MAPlB;AAQEC,MAAAA,UAAU,EAAE,EARd;AASEC,MAAAA,gBAAgB,EAAE,GATpB;AAUEC,MAAAA,eAAe,EAAE,OAVnB;AAWEC,MAAAA,gBAAgB,EAAE,oBAXpB;AAYEC,MAAAA,oBAAoB,EAAE,MAZxB;AAaEC,MAAAA,gBAAgB,EAAE,CAbpB;AAcEC,MAAAA,gBAAgB,EAAE,CAdpB;AAeEC,MAAAA,yBAAyB,EAAE,oBAf7B;AAgBEC,MAAAA,qBAAqB,EAAE,qBAhBzB;AAiBEC,MAAAA,qBAAqB,EAAE,CAjBzB;AAkBEC,MAAAA,WAAW,EAAE,CAlBf;AAmBEC,MAAAA,cAAc,EAAE;AAnBlB,KAvBQ,EA6CR;AACExB,MAAAA,IAAI,EAAEN,cAAc,CAACS,GAAf,CAAoBC,IAAD,IAAUA,IAAI,CAAC,eAAD,CAAjC,CADR;AAEEG,MAAAA,KAAK,EAAE,eAFT;AAGEC,MAAAA,IAAI,EAAE,KAHR;AAIEC,MAAAA,WAAW,EAAE,GAJf;AAKEC,MAAAA,eAAe,EAAE,wBALnB;AAMEC,MAAAA,WAAW,EAAE,sBANf;AAOEC,MAAAA,cAAc,EAAE,MAPlB;AAQEC,MAAAA,UAAU,EAAE,EARd;AASEC,MAAAA,gBAAgB,EAAE,GATpB;AAUEC,MAAAA,eAAe,EAAE,OAVnB;AAWEC,MAAAA,gBAAgB,EAAE,sBAXpB;AAYEC,MAAAA,oBAAoB,EAAE,MAZxB;AAaEC,MAAAA,gBAAgB,EAAE,CAbpB;AAcEC,MAAAA,gBAAgB,EAAE,CAdpB;AAeEC,MAAAA,yBAAyB,EAAE,sBAf7B;AAgBEC,MAAAA,qBAAqB,EAAE,qBAhBzB;AAiBEC,MAAAA,qBAAqB,EAAE,CAjBzB;AAkBEC,MAAAA,WAAW,EAAE,CAlBf;AAmBEC,MAAAA,cAAc,EAAE;AAnBlB,KA7CQ;AAFqB,GAAD,CAAhC;AAwEAnC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,UAAU,GAAG,EAAjB,EAAqB;AACnB6B,MAAAA,UAAU,CAAC,MAAM;AACf5B,QAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACAD,QAAAA,iBAAiB,CAAC,MAAMH,YAAY,CAACkC,KAAb,CAAmB,CAAnB,EAAsB9B,UAAtB,CAAP,CAAjB;AACAK,QAAAA,OAAO,CAACD,IAAD,CAAP;AACD,OAJS,EAIP,IAJO,CAAV;AAKD;AAEF,GATQ,EASN,CAACJ,UAAD,CATM,CAAT,CA5EoC,CAsFpC;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAE+B,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,MAAM,EAAE;AAAxB,KAAZ;AAAmD,IAAA,EAAE,EAAC,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAE5B,IADR;AAEE,IAAA,OAAO,EAAE;AACP6B,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CAAC;AACNC,UAAAA,KAAK,EAAE;AACLP,YAAAA,cAAc,EAAE;AADX;AADD,SAAD;AADD,OADD;AAQPQ,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE;AADD;AARJ,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAoBD,CA9GD;;AAgHA,eAAexC,uBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\n\nconst AutomationRealTimeChart = () => {\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [data, setData] = useState({\n    labels: automationData.map((item) => item.Day),\n    datasets: [\n      {\n        data: automationData.map((item) => item[\"Current state\"]),\n        label: \"Current State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n\n      },\n      {\n        data: automationData.map((item) => item[\"Improved State\"]),\n        label: \"Improved State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n        borderColor: \"rgba(255, 0, 0, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(255, 0, 0, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n\n      },\n      {\n        data: automationData.map((item) => item[\"Optimal State\"]),\n        label: \"Optimal State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n        borderColor: \"rgb(241, 226, 95, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgb(241, 226, 95, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n\n      },\n    ],\n  });\n\n  useEffect(() => {\n    if (dayCounter < 50) {\n      setTimeout(() => {\n        setDayCounter(dayCounter + 1);\n        setAutomationData(() => burndownData.slice(0, dayCounter))\n        setData(data)\n      }, 1000)\n    }\n\n  }, [dayCounter])\n  // if (dayCounter === 10) {\n  //   console.log(\"chart: \", data, \"new array: \", automationData.map((item) => item[\"Optimal State\"]))\n  // }\n\n  return (\n    <div style={{ width: \"80%\", margin: \"40px auto\" }} id=\"chart\">\n      <Line\n        data={data}\n        options={{\n          scales: {\n            xAxes: [{\n              ticks: {\n                pointHitRadius: 4\n              }\n            }]\n          },\n          animation: {\n            duration: 0\n          }\n        }}\n\n      />\n    </div>\n  );\n};\n\nexport default AutomationRealTimeChart;"]},"metadata":{},"sourceType":"module"}