{"ast":null,"code":"import _slicedToArray from\"/Users/ccrm/Desktop/projects/chartjs/dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import ClientDataChart from'./ClientDataChart';var Chart=function Chart(props){var _useState=useState('2020'),_useState2=_slicedToArray(_useState,2),activeQuery=_useState2[0],setActiveQuery=_useState2[1];var _useState3=useState('BRData'),_useState4=_slicedToArray(_useState3,2),typeQuery=_useState4[0],setTypeQuery=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),clientData=_useState6[0],setData=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),clientDataComparison=_useState8[0],setDataComparison=_useState8[1];var _useState9=useState(true),_useState10=_slicedToArray(_useState9,2),loading=_useState10[0],setLoading=_useState10[1];var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),error=_useState12[0],setError=_useState12[1];useEffect(function(){fetch(\"http://localhost:8080/client/\".concat(activeQuery)).then(function(res){return res.json();}).then(function(data){setData(data);setLoading(false);}).catch(function(error){if(activeQuery!==\"2018/2019\"){setError(error);}});},[activeQuery]);useEffect(function(){fetch(\"http://localhost:8080/client\").then(function(res){return res.json();}).then(function(data){setDataComparison(data);setLoading(false);}).catch(function(error){return setError(error);});},[]);return/*#__PURE__*/React.createElement(\"div\",null,loading&&/*#__PURE__*/React.createElement(\"p\",null,\"Chart loading...\"),error&&/*#__PURE__*/React.createElement(\"p\",null,error.message),/*#__PURE__*/React.createElement(ClientDataChart,{activeQuery:activeQuery,typeQuery:typeQuery,setQuery:setActiveQuery,setTypeQuery:setTypeQuery,data:clientData,dataComparison:clientDataComparison}));};export default Chart;","map":{"version":3,"sources":["/Users/ccrm/Desktop/projects/chartjs/dev/src/components/charts/BarChart.js"],"names":["React","useState","useEffect","ClientDataChart","Chart","props","activeQuery","setActiveQuery","typeQuery","setTypeQuery","clientData","setData","clientDataComparison","setDataComparison","loading","setLoading","error","setError","fetch","then","res","json","data","catch","message"],"mappings":"+JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CAGA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAW,eACeJ,QAAQ,CAAC,MAAD,CADvB,wCAChBK,WADgB,eACHC,cADG,8BAEWN,QAAQ,CAAC,QAAD,CAFnB,yCAEhBO,SAFgB,eAELC,YAFK,8BAGOR,QAAQ,CAAC,EAAD,CAHf,yCAGhBS,UAHgB,eAGJC,OAHI,8BAI2BV,QAAQ,CAAC,EAAD,CAJnC,yCAIhBW,oBAJgB,eAIMC,iBAJN,8BAKOZ,QAAQ,CAAC,IAAD,CALf,0CAKhBa,OALgB,gBAKPC,UALO,gCAMGd,QAAQ,CAAC,EAAD,CANX,2CAMhBe,KANgB,gBAMTC,QANS,gBASvBf,SAAS,CAAC,UAAM,CACdgB,KAAK,wCAAiCZ,WAAjC,EAAL,CACGa,IADH,CACQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADX,EAEGF,IAFH,CAEQ,SAAAG,IAAI,CAAI,CACZX,OAAO,CAACW,IAAD,CAAP,CACAP,UAAU,CAAC,KAAD,CAAV,CACD,CALH,EAOGQ,KAPH,CAOS,SAACP,KAAD,CAAW,CAChB,GAAIV,WAAW,GAAK,WAApB,CAAiC,CAC/BW,QAAQ,CAACD,KAAD,CAAR,CACD,CAEF,CAZH,EAaD,CAdQ,CAcN,CAACV,WAAD,CAdM,CAAT,CAgBAJ,SAAS,CAAC,UAAM,CACdgB,KAAK,CAAC,8BAAD,CAAL,CACGC,IADH,CACQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADX,EAEGF,IAFH,CAEQ,SAAAG,IAAI,CAAI,CACZT,iBAAiB,CAACS,IAAD,CAAjB,CACAP,UAAU,CAAC,KAAD,CAAV,CACD,CALH,EAMGQ,KANH,CAMS,SAACP,KAAD,QAAWC,CAAAA,QAAQ,CAACD,KAAD,CAAnB,EANT,EAOD,CARQ,CAQN,EARM,CAAT,CAUA,mBAEE,+BAEGF,OAAO,eAAI,gDAFd,CAGGE,KAAK,eAAI,6BAAIA,KAAK,CAACQ,OAAV,CAHZ,cAKE,oBAAC,eAAD,EACE,WAAW,CAAElB,WADf,CAEE,SAAS,CAAEE,SAFb,CAGE,QAAQ,CAAED,cAHZ,CAIE,YAAY,CAAEE,YAJhB,CAKE,IAAI,CAAEC,UALR,CAME,cAAc,CAAEE,oBANlB,EALF,CAFF,CAiBD,CApDD,CAsDA,cAAeR,CAAAA,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ClientDataChart from './ClientDataChart'\n\n\nconst Chart = (props) => {\n  const [activeQuery, setActiveQuery] = useState('2020');\n  const [typeQuery, setTypeQuery] = useState('BRData');\n  const [clientData, setData] = useState([]);\n  const [clientDataComparison, setDataComparison] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('')\n\n\n  useEffect(() => {\n    fetch(`http://localhost:8080/client/${activeQuery}`)\n      .then(res => res.json())\n      .then(data => {\n        setData(data);\n        setLoading(false);\n      })\n\n      .catch((error) => {\n        if (activeQuery !== \"2018/2019\") {\n          setError(error)\n        }\n\n      });\n  }, [activeQuery]);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8080/client\")\n      .then(res => res.json())\n      .then(data => {\n        setDataComparison(data);\n        setLoading(false);\n      })\n      .catch((error) => setError(error));\n  }, []);\n\n  return (\n\n    <div>\n\n      {loading && <p>Chart loading...</p>}\n      {error && <p>{error.message}</p>}\n\n      <ClientDataChart\n        activeQuery={activeQuery}\n        typeQuery={typeQuery}\n        setQuery={setActiveQuery}\n        setTypeQuery={setTypeQuery}\n        data={clientData}\n        dataComparison={clientDataComparison}\n      />\n    </div>\n  )\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}