{"ast":null,"code":"var _jsxFileName = \"/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\nimport { Button } from \"@material-ui/core\";\nimport \"./automation.css\";\n\nconst AutomationRealTimeChart = () => {\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const [startAnimation, setStartAnimation] = useState(false);\n  const chart = React.createRef();\n  const chartOptions = {\n    labels: automationData.map(item => item.Day),\n    datasets: [{\n      data: automationData.map(item => item[\"Current state\"]),\n      label: \"Current State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(75,192,192,0.4)\",\n      borderColor: \"rgba(75,192,192,1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(75,192,192,1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }, {\n      data: automationData.map(item => item[\"Improved State\"]),\n      label: \"Improved State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n      borderColor: \"rgba(255, 0, 0, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(255, 0, 0, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }, {\n      data: automationData.map(item => item[\"Optimal State\"]),\n      label: \"Optimal State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n      borderColor: \"rgb(241, 226, 95, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgb(241, 226, 95, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }]\n  };\n  useEffect(() => {\n    console.log(chart);\n\n    if (startAnimation) {\n      setChartData(chartOptions);\n\n      if (dayCounter < 50) {\n        setTimeout(() => {\n          setDayCounter(dayCounter + 1);\n          setAutomationData(() => burndownData.slice(0, dayCounter));\n        }, 250);\n      }\n\n      if (dayCounter === 50) {\n        setStartAnimation(false);\n        setDayCounter(0);\n        setAutomationData([]);\n      }\n    }\n  }, [dayCounter, startAnimation]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"Optimising offboarding execution\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, \"Some text here\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setStartAnimation(!startAnimation),\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, startAnimation ? \"Stop\" : \"Start\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      chart: function (chart, event) {\n        console.log(chart);\n      },\n      layout: {\n        padding: {\n          right: 20,\n          left: 20\n        }\n      },\n      scales: {\n        xAxes: [{\n          ticks: {\n            stepSize: 1,\n            min: 50,\n            suggestedMin: 50\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            suggestedMax: 1000,\n            suggestedMin: 0\n          }\n        }]\n      },\n      animation: {\n        duration: 1000\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default AutomationRealTimeChart;","map":{"version":3,"sources":["/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx"],"names":["React","useEffect","useState","Line","burndownData","Button","AutomationRealTimeChart","automationData","setAutomationData","dayCounter","setDayCounter","initialState","setInitialState","chartData","setChartData","startAnimation","setStartAnimation","chart","createRef","chartOptions","labels","map","item","Day","datasets","data","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","console","log","setTimeout","slice","event","layout","padding","right","left","scales","xAxes","ticks","stepSize","min","suggestedMin","yAxes","suggestedMax","animation","duration"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\nimport { Button } from \"@material-ui/core\";\nimport \"./automation.css\";\nconst AutomationRealTimeChart = () => {\n\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const [startAnimation, setStartAnimation] = useState(false);\n  const chart = React.createRef()\n  const chartOptions =\n  {\n    labels: automationData.map((item) => item.Day),\n    datasets: [\n      {\n        data: automationData.map((item) => item[\"Current state\"]),\n        label: \"Current State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n      },\n      {\n        data: automationData.map((item) => item[\"Improved State\"]),\n        label: \"Improved State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n        borderColor: \"rgba(255, 0, 0, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(255, 0, 0, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n      },\n      {\n        data: automationData.map((item) => item[\"Optimal State\"]),\n        label: \"Optimal State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n        borderColor: \"rgb(241, 226, 95, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgb(241, 226, 95, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n\n      },\n    ],\n\n  }\n\n  useEffect(() => {\n    console.log(chart)\n    if (startAnimation) {\n      setChartData(chartOptions)\n\n      if (dayCounter < 50) {\n        setTimeout(() => {\n          setDayCounter(dayCounter + 1);\n          setAutomationData(() => burndownData.slice(0, dayCounter))\n\n        }, 250)\n      }\n      if (dayCounter === 50) {\n        setStartAnimation(false)\n        setDayCounter(0)\n        setAutomationData([])\n      }\n    }\n  }, [dayCounter, startAnimation])\n\n\n  return (\n    <div className=\"container\">\n      <h1>Optimising offboarding execution</h1>\n      <div className=\"row\">\n        <div className=\"text-container\">Some text here\n          <div className=\"button-start\">\n            <Button\n              onClick={() => setStartAnimation(!startAnimation)}\n              variant=\"contained\"\n              color=\"secondary\">{startAnimation ? \"Stop\" : \"Start\"}\n            </Button>\n\n          </div>\n        </div>\n        <div className=\"chart-container\">\n\n          <Line\n            data={chartData}\n\n            options={{\n              chart: function (chart, event) {\n                console.log(chart)\n              },\n\n              layout: {\n                padding: {\n                  right: 20,\n                  left: 20\n                }\n              },\n              scales: {\n                xAxes: [{\n                  ticks: {\n                    stepSize: 1,\n                    min: 50,\n                    suggestedMin: 50\n                  }\n                }],\n                yAxes: [{\n                  ticks: {\n                    suggestedMax: 1000,\n                    suggestedMin: 0\n                  }\n                }]\n              },\n              animation: {\n                duration: 1000\n              }\n            }}\n\n          />\n        </div>\n\n\n      </div>\n\n\n    </div>\n  );\n};\n\nexport default AutomationRealTimeChart;"]},"metadata":{},"sourceType":"module"}