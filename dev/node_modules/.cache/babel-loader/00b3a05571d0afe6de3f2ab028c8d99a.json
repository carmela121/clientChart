{"ast":null,"code":"var _jsxFileName = \"/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\n\nconst AutomationRealTimeChart = () => {\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const chartOptions = {\n    data: {\n      labels: automationData.map(item => item.Day),\n      datasets: [{\n        data: automationData.map(item => item[\"Current state\"]),\n        label: \"Current State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10\n      }, {\n        data: automationData.map(item => item[\"Improved State\"]),\n        label: \"Improved State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n        borderColor: \"rgba(255, 0, 0, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(255, 0, 0, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10\n      }, {\n        data: automationData.map(item => item[\"Optimal State\"]),\n        label: \"Optimal State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n        borderColor: \"rgb(241, 226, 95, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgb(241, 226, 95, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10\n      }]\n    }\n  };\n  useEffect(() => {\n    setChartData(chartOptions);\n\n    if (dayCounter < 50) {\n      setTimeout(() => {\n        setDayCounter(dayCounter + 1);\n        setAutomationData(() => burndownData.slice(0, dayCounter));\n      }, 250);\n    }\n  }, [dayCounter]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"80%\",\n      margin: \"40px auto\"\n    },\n    id: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      scales: {\n        xAxes: [{\n          ticks: {\n            stepSize: 1\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            suggestedMax: 1000,\n            suggestedMin: 0\n          }\n        }]\n      },\n      animation: {\n        duration: 1000\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AutomationRealTimeChart;","map":{"version":3,"sources":["/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx"],"names":["React","useEffect","useState","Line","burndownData","AutomationRealTimeChart","automationData","setAutomationData","dayCounter","setDayCounter","initialState","setInitialState","chartData","setChartData","chartOptions","data","labels","map","item","Day","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","setTimeout","slice","width","margin","scales","xAxes","ticks","stepSize","yAxes","suggestedMax","suggestedMin","animation","duration"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\n\nconst AutomationRealTimeChart = () => {\n\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const chartOptions = {\n    data: {\n      labels: automationData.map((item) => item.Day),\n      datasets: [\n        {\n          data: automationData.map((item) => item[\"Current state\"]),\n          label: \"Current State\",\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(75,192,192,0.4)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(75,192,192,1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n\n        },\n        {\n          data: automationData.map((item) => item[\"Improved State\"]),\n          label: \"Improved State\",\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n          borderColor: \"rgba(255, 0, 0, 1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(255, 0, 0, 1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n\n        },\n        {\n          data: automationData.map((item) => item[\"Optimal State\"]),\n          label: \"Optimal State\",\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n          borderColor: \"rgb(241, 226, 95, 1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgb(241, 226, 95, 1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n\n        },\n      ],\n    }\n\n  }\n  useEffect(() => {\n    setChartData(chartOptions)\n    if (dayCounter < 50) {\n      setTimeout(() => {\n        setDayCounter(dayCounter + 1);\n        setAutomationData(() => burndownData.slice(0, dayCounter))\n\n      }, 250)\n    }\n\n  }, [dayCounter])\n\n\n  return (\n    <div style={{ width: \"80%\", margin: \"40px auto\" }} id=\"chart\">\n      <Line\n        data={chartData}\n        options={{\n          scales: {\n            xAxes: [{\n              ticks: {\n                stepSize: 1\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                suggestedMax: 1000,\n                suggestedMin: 0\n              }\n            }]\n          },\n          animation: {\n            duration: 1000\n          }\n        }}\n\n      />\n    </div>\n  );\n};\n\nexport default AutomationRealTimeChart;"]},"metadata":{},"sourceType":"module"}