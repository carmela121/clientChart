{"ast":null,"code":"var _jsxFileName = \"/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\nimport { Button } from \"@material-ui/core\";\nimport \"./automation.css\";\n\nconst AutomationRealTimeChart = () => {\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const [startAnimation, setStartAnimation] = useState(false);\n  const [text, setShowText] = useState(false);\n  const chartOptions = {\n    labels: automationData.map(item => item.Day),\n    datasets: [{\n      data: automationData.map(item => item[\"Current state\"]),\n      label: \"Current State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(75,192,192,0.4)\",\n      borderColor: \"rgba(75,192,192,1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(75,192,192,1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }, {\n      data: automationData.map(item => item[\"Improved State\"]),\n      label: \"Improved State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n      borderColor: \"rgba(255, 0, 0, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(255, 0, 0, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }, {\n      data: automationData.map(item => item[\"Optimal State\"]),\n      label: \"Optimal State\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n      borderColor: \"rgb(241, 226, 95, 1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgb(241, 226, 95, 1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }]\n  };\n  useEffect(() => {\n    if (startAnimation) {\n      setChartData(chartOptions);\n\n      if (dayCounter < 50) {\n        setTimeout(() => {\n          setDayCounter(dayCounter + 1);\n          setAutomationData(() => burndownData.slice(0, dayCounter));\n        }, 100);\n      }\n\n      if (dayCounter === 50) {\n        setStartAnimation(false);\n        setDayCounter(0);\n\n        if (automationData != 0) {\n          setShowText(true);\n        } else {\n          setShowText(false);\n        }\n      }\n    }\n  }, [dayCounter, startAnimation]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, \"Optimising Offboarding Execution\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      layout: {\n        padding: {\n          right: 20,\n          left: 20,\n          bottom: 40\n        }\n      },\n      scales: {\n        xAxes: [{\n          ticks: {\n            stepSize: 1,\n            min: 50,\n            suggestedMin: 50\n          },\n          scaleLabel: {\n            display: true,\n            fontSize: 14,\n            labelString: \"Number of Days\"\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            suggestedMax: 1000,\n            suggestedMin: 0\n          },\n          scaleLabel: {\n            display: true,\n            fontSize: 14,\n            labelString: \"Number of Accounts\"\n          }\n        }]\n      },\n      animation: {\n        duration: 1000\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, !text && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }, \"Monte Carlo Simulation Parameters: Automation setup: 8 Days EMEA Cost: \\u20AC10K APAC Cost: \\u20AC22K AMER Cost: \\u20AC17k Budget: \\u20AC\"), text && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 20\n    }\n  }, \" Lorem ipsum dolor sit amet consectetur, adipisicing elit. Omnis vitae expedita et perferendis molestias possimus, doloribus quae quo enim! Nulla rem ut maxime libero reiciendis? Iste consequuntur aliquid dicta dolores!\"), !text && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setStartAnimation(!startAnimation),\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, startAnimation ? \"Stop\" : \"Start\")))));\n};\n\nexport default AutomationRealTimeChart;","map":{"version":3,"sources":["/Users/ccrm/Desktop/projects/chartjs/dev/src/components/automation/AutomationRealTime.jsx"],"names":["React","useEffect","useState","Line","burndownData","Button","AutomationRealTimeChart","automationData","setAutomationData","dayCounter","setDayCounter","initialState","setInitialState","chartData","setChartData","startAnimation","setStartAnimation","text","setShowText","chartOptions","labels","map","item","Day","datasets","data","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","setTimeout","slice","layout","padding","right","left","bottom","scales","xAxes","ticks","stepSize","min","suggestedMin","scaleLabel","display","fontSize","labelString","yAxes","suggestedMax","animation","duration"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport burndownData from \"./burndownData\";\nimport { Button } from \"@material-ui/core\";\nimport \"./automation.css\";\nconst AutomationRealTimeChart = () => {\n\n  const [automationData, setAutomationData] = useState([]);\n  const [dayCounter, setDayCounter] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const [startAnimation, setStartAnimation] = useState(false);\n  const [text, setShowText] = useState(false);\n  const chartOptions =\n  {\n    labels: automationData.map((item) => item.Day),\n    datasets: [\n      {\n        data: automationData.map((item) => item[\"Current state\"]),\n        label: \"Current State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n      },\n      {\n        data: automationData.map((item) => item[\"Improved State\"]),\n        label: \"Improved State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(255, 0, 0, 0.6)\",\n        borderColor: \"rgba(255, 0, 0, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(255, 0, 0, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(255, 0, 0, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n      },\n      {\n        data: automationData.map((item) => item[\"Optimal State\"]),\n        label: \"Optimal State\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgb(241, 226, 95, 0.4)\",\n        borderColor: \"rgb(241, 226, 95, 1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgb(241, 226, 95, 1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(241, 226, 95, 1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n\n      },\n    ],\n  }\n\n  useEffect(() => {\n    if (startAnimation) {\n      setChartData(chartOptions)\n\n      if (dayCounter < 50) {\n        setTimeout(() => {\n          setDayCounter(dayCounter + 1);\n          setAutomationData(() => burndownData.slice(0, dayCounter))\n\n        }, 100)\n      }\n      if (dayCounter === 50) {\n        setStartAnimation(false)\n        setDayCounter(0)\n\n        if (automationData != 0) {\n          setShowText(true)\n        } else {\n          setShowText(false)\n        }\n      }\n    }\n  }, [dayCounter, startAnimation])\n\n\n  return (\n    <div className=\"container\">\n      <h1>Optimising Offboarding Execution</h1>\n\n      <div className=\"row\">\n        <div className=\"chart-container\">\n          <Line\n            data={chartData}\n            options={{\n              layout: {\n                padding: {\n                  right: 20,\n                  left: 20,\n                  bottom: 40\n                }\n              },\n              scales: {\n                xAxes: [{\n                  ticks: {\n                    stepSize: 1,\n                    min: 50,\n                    suggestedMin: 50\n                  },\n                  scaleLabel: {\n                    display: true,\n                    fontSize: 14,\n                    labelString: \"Number of Days\",\n                  }\n                }],\n                yAxes: [{\n                  ticks: {\n                    suggestedMax: 1000,\n                    suggestedMin: 0\n                  },\n                  scaleLabel: {\n                    display: true,\n                    fontSize: 14,\n                    labelString: \"Number of Accounts\",\n                  }\n                }]\n              },\n              animation: {\n                duration: 1000\n              }\n            }}\n          />\n        </div>\n        <div className=\"text-container\">\n          {!text && <div>\n            Monte Carlo Simulation\n\n            Parameters:\n\n            Automation setup: 8 Days\n\n            EMEA Cost: €10K\n\n            APAC Cost: €22K\n\n            AMER Cost: €17k\n\n            Budget: €\n              </div>}\n          {text && <p> Lorem ipsum dolor sit amet consectetur, adipisicing elit. Omnis vitae expedita et perferendis molestias possimus, doloribus quae quo enim! Nulla rem ut maxime libero reiciendis? Iste consequuntur aliquid dicta dolores!</p>}\n          {!text && <div className=\"button-start\">\n            <Button\n              onClick={() => setStartAnimation(!startAnimation)}\n              variant=\"contained\"\n              color=\"secondary\">{startAnimation ? \"Stop\" : \"Start\"}\n            </Button>\n\n          </div>}\n        </div>\n      </div>\n    </div >\n  );\n};\n\nexport default AutomationRealTimeChart;"]},"metadata":{},"sourceType":"module"}