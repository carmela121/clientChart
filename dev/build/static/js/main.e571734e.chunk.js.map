{"version":3,"sources":["components/charts/BarChart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","useState","loading","setLoading","data","setData","useEffect","fetch","then","res","json","chartData","labels","map","city","datasets","label","total","backgroundColor","men","women","catch","error","console","log","className","Switch","name","onClick","handleClick","options","title","display","text","fontSize","legend","position","App","setState","state","prefersDark","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4PAsFeA,EAlFD,SAACC,GAAW,IAAD,EACOC,oBAAS,GADhB,mBAChBC,EADgB,KACPC,EADO,OAECF,mBAAS,IAFV,mBAEhBG,EAFgB,KAEVC,EAFU,KA0DvB,OAtDAC,qBAAU,WACRC,MACE,yBACCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAJ,GACJ,IAAIO,EAAY,CACdC,OAAQR,EAAKS,KAAI,qBAAGC,QACpBC,SAAU,CAAC,CACTC,MAAO,mBACPZ,KAAMA,EAAKS,KAAI,qBAAGI,SAClBC,gBAAiB,CACf,mBACA,mBACA,oBACA,oBACA,oBACA,oBACA,mBACA,sBAEJ,CACEF,MAAO,MACPZ,KAAMA,EAAKS,KAAI,qBAAGM,OAClBD,gBAAiB,CACf,oBACA,mBACA,oBACA,oBACA,oBACA,qBACA,qBACA,sBAEJ,CACEF,MAAO,QACPZ,KAAMA,EAAKS,KAAI,qBAAGO,SAClBF,gBAAiB,CACf,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,yBAINb,EAAQM,GACRR,GAAW,MAEZkB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,IAID,yBAAKG,UAAU,SACZvB,GAAW,+CACZ,kBAACwB,EAAA,EAAD,CAAQC,KAAK,WAAWC,QAAS5B,EAAM6B,cAEvC,kBAAC,IAAD,CACEzB,KAAMA,EACN0B,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAM,oCACNC,SAAU,IAEZC,OAAQ,CACNH,SAAS,EACTI,SAAU,cCzCPC,G,gEA5Bb,aAAe,IAAD,8BACZ,gBAMFR,YAAc,WAEZ,EAAKS,UAAS,SAAAC,GAAK,MAAK,CACtBC,aAAcD,EAAMC,iBARtB,EAAKD,MAAQ,CACXC,aAAa,GAHH,E,qDAeZ,OAEE,yBAAKf,UAAWgB,KAAKF,MAAMC,YAAc,OAAS,SAEhD,kBAAC,EAAD,CAAOX,YAAaY,KAAKZ,mB,GArBfa,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdrC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqC,a","file":"static/js/main.e571734e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Switch } from '@material-ui/core';\nimport { Bar } from 'react-chartjs-2';\n\nconst Chart = (props) => {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(\n      'http://localhost:5000')\n      .then(res => res.json())\n      .then(data => {\n        let chartData = {\n          labels: data.map(({ city }) => city),\n          datasets: [{\n            label: 'Total population',\n            data: data.map(({ total }) => total),\n            backgroundColor: [\n              'rgb(50, 168, 82)',\n              'rgb(168, 50, 50)',\n              'rgb(50, 144, 168)',\n              'rgb(142, 50, 168)',\n              'rgb(193, 201, 34)',\n              'rgb(64, 237, 231)',\n              'rgb(237, 64, 64)',\n              'rgb(32, 103, 135)']\n          },\n          {\n            label: 'Men',\n            data: data.map(({ men }) => men),\n            backgroundColor: [\n              'rgb(65, 204, 103)',\n              'rgb(222, 73, 73)',\n              'rgb(78, 193, 222)',\n              'rgb(190, 70, 224)',\n              'rgb(219, 227, 68)',\n              'rgb(111, 227, 223)',\n              'rgb(237, 114, 114)',\n              'rgb(60, 158, 201)']\n          },\n          {\n            label: 'Women',\n            data: data.map(({ women }) => women),\n            backgroundColor: [\n              'rgba(111, 227, 143)',\n              'rgba(240, 115, 115)',\n              'rgba(140, 218, 237)',\n              'rgba(211, 127, 235)',\n              'rgba(234, 240, 120)',\n              'rgba(182, 227, 225)',\n              'rgba(237, 164, 164)',\n              'rgb(106, 196, 235)']\n          }\n          ]\n        }\n        setData(chartData);\n        setLoading(false)\n      })\n      .catch(error => console.log(error));\n  }, []);\n\n  return (\n\n    <div className=\"chart\">\n      {loading && <p>Chart loading...</p>}\n      <Switch name=\"checkedA\" onClick={props.handleClick} />\n\n      <Bar\n        data={data}\n        options={{\n          title: {\n            display: true,\n            text: \"AndalucÃ­a population by region\",\n            fontSize: 25\n          },\n          legend: {\n            display: true,\n            position: 'right'\n          }\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Chart;","import React from 'react';\nimport Chart from './components/charts/BarChart'\n\n\nimport './themes.css'\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      prefersDark: false\n    }\n  }\n\n  handleClick = () => {\n\n    this.setState(state => ({\n      prefersDark: !state.prefersDark\n    }));\n  }\n\n  render() {\n    return (\n\n      <div className={this.state.prefersDark ? 'dark' : 'light'}>\n\n        <Chart handleClick={this.handleClick} />\n\n      </div >\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}